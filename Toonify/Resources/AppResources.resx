<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en-US</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="ApplicationTitle" xml:space="preserve">
    <value>Toonify</value>
  </data>
  <data name="AboutButtonEmail" xml:space="preserve">
    <value>Email</value>
    <comment>About page - email tile</comment>
  </data>
  <data name="AboutButtonReview" xml:space="preserve">
    <value>Review</value>
    <comment>About page - review tile</comment>
  </data>
  <data name="AboutButtonStore" xml:space="preserve">
    <value>Store</value>
    <comment>About page - store tile</comment>
  </data>
  <data name="AboutButtonTwitter" xml:space="preserve">
    <value>Twitter</value>
    <comment>About page - twitter tile</comment>
  </data>
  <data name="AboutDescription" xml:space="preserve">
    <value>Turn your photos into comics, pick from different layouts, add speech bubbles and share your creations with your friends. </value>
    <comment>About page - description</comment>
  </data>
  <data name="AboutHeader" xml:space="preserve">
    <value>About</value>
    <comment>About page - title</comment>
  </data>
  <data name="AddImageMode" xml:space="preserve">
    <value>Add image</value>
    <comment>Editing a comic page - this mode allows the user to add images to the page</comment>
  </data>
  <data name="AddSpeechMode" xml:space="preserve">
    <value>Add speech</value>
    <comment>Editing a comic page - this mode allows the user to add speech bubbles to the page</comment>
  </data>
  <data name="CancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DeletePageAreYouSure" xml:space="preserve">
    <value>Are you sure you want to delete this page?</value>
  </data>
  <data name="DeleteTitle" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="EnterSpeechBubbleTextWatermark" xml:space="preserve">
    <value>Enter text for speech bubble</value>
    <comment>Editing a comic page - this is the watermark text shown in the text-box for adding speech bubble text</comment>
  </data>
  <data name="ErrorConvertingImage" xml:space="preserve">
    <value>There was an error converting this image</value>
    <comment>Error message shown if there was an error when converting an image to a cartoon</comment>
  </data>
  <data name="ErrorTitle" xml:space="preserve">
    <value>Error</value>
    <comment>Error message title text</comment>
  </data>
  <data name="ExportTitle" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ImagesHeader" xml:space="preserve">
    <value>Images</value>
    <comment>Page header - imported images</comment>
  </data>
  <data name="ImportImageButton" xml:space="preserve">
    <value>Import image</value>
    <comment>Button to import an image to the app</comment>
  </data>
  <data name="ImportImageTitle" xml:space="preserve">
    <value>Pick image</value>
    <comment>Page title to pick an image from the device to import and use on a comic</comment>
  </data>
  <data name="LoadingText" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="NewPageButton" xml:space="preserve">
    <value>Create new page</value>
    <comment>Button to create a new comic page</comment>
  </data>
  <data name="OkButton" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="OutOfMemoryError" xml:space="preserve">
    <value>Out of memory, your device may not be powerful enough</value>
    <comment>Error message shown if the device runs out of memory</comment>
  </data>
  <data name="PageHasBeenExported" xml:space="preserve">
    <value>Page has been exported to your device's photos</value>
  </data>
  <data name="PagesHeader" xml:space="preserve">
    <value>Pages</value>
    <comment>Page header - comic pages</comment>
  </data>
  <data name="PickImageTitle" xml:space="preserve">
    <value>Select image</value>
    <comment>Page title - select a comic image to use on a page</comment>
  </data>
  <data name="SelectLayoutTitle" xml:space="preserve">
    <value>Pick a layout</value>
    <comment>Pick-a-layout page title - this page allows the user to select a comic page layout</comment>
  </data>
  <data name="ShareTitle" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="TakePhotoButton" xml:space="preserve">
    <value>Take photo</value>
    <comment>Button to take a photo for the app</comment>
  </data>
  <data name="TutorialTextCreatePages" xml:space="preserve">
    <value>Now create new pages and add your images</value>
    <comment>Tutorial text to guide the user through using the app - 2nd they can use images on comic pages</comment>
  </data>
  <data name="TutorialTextImportImages" xml:space="preserve">
    <value>First add import some images or take some photos</value>
    <comment>Tutorial text to guide the user through using the app - 1st they need to import some photos into the app</comment>
  </data>
</root>